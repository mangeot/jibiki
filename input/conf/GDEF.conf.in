#
#  Papillon51
#  Enhydra Application
#
#  Simple Enhydra application configuration file.
#

#
# Comma separated CLASSPATH directories and files used by this application.
# You must rebuild the jar after every change to the app.
#
Server.ClassPath[] = "@DEPLOY_PATH@/lib/Papillon.jar"
#Server.ClassPath[] = "@DEPLOY_PATH@/output/../classes"

#
# The fully qualified name of the application class.
#
Server.AppClass = fr.imag.clips.papillon.Papillon

#
# Prefix used to derive presentation object class
# names and paths from URLs.
# Assumes run from the output directory for debugging.
#
Server.PresentationPrefix = "fr/imag/clips/papillon/presentation"

#
# Flag to indicate that application classes and resources should be reloaded
# automatically if ANY file in the CLASSPATH changes.  NOTE:  This is a
# debugging option and may slow down the performance of your application.
# The CLASSPATH should NOT contain any directories (or underlying directories)
# that contain constantly changing files, i.e. a log file.  For example, do
# NOT include the application's output directory in the CLASSPATH because it
# contains the application log files in the underlying log directory.
#
Server.AutoReload = false
#Server.XMLC.DeferredParsing = true

#
# Maximum number of minutes a user session can last.
#
SessionManager.Lifetime = 720

#
# Maximum number of minutes a user may be idle before being logged off.
#
SessionManager.MaxIdleTime = 120

#
# Flag to indicate that SessionManager will be held in memory
# during restart application (default is false).
#
#SessionManager.MemoryPersistence = true

#
# The session home implementation to use.  May
# be one of {BASIC, PAGE_TO_DISK, PAGE_TO_DB, CUSTOM}.
#
#SessionManager.SessionHome.Mode = BASIC

#
# Maximum number of concurrent sessions.
#
#SessionManager.SessionHome.MaxSessions = 100

#
# PAGE_TO_* settings
# ------------------
# The following settings are required by all paged (DISK, DB) implementations.
#

# The maximum number of sessions that will be held in memory simultaneously.
#SessionManager.SessionHome.PageThreshold = 50

# The maximum amount of time that a session will remain in memory
# in an inactive (passive) state.  If this amount of time is exceeded
# then the session is paged out.  The value is in seconds.
#SessionManager.SessionHome.PageTimeThreshold = 60

# The maximum amout of time that a thread will wait for a
# session to be paged back into memory.  In milliseconds.
#SessionManager.SessionHome.PageWait = 5000

#
# Flag to indicate that sessions should be paged and reloaded
# during application restart (default is false).
# This parameter has no effect if use MemoryPersistence = true.
# Important: Don't use same directory for pageDir key in 
# PAGE_TO_DISK settings for different applications.
#
#SessionManager.SessionHome.SaveOnRestart = true

#
# PAGE_TO_DISK settings
# ---------------------
#
# The directory where sessions will be paged.  This setting is required
# when using PAGE_TO_DISK.
#SessionManager.SessionHome.PageDir = /tmp/page

#
# PAGE_TO_DB session home settings
# --------------------------------
# NOTE: to use PAGE_TO_DB you'll need your database properly configured.
#
# If the following is not specified then sessions are paged to the default database.
#SessionManager.SessionHome.DatabaseName = _enter_db_name_here

# If the following is not specified then session data is written
# to the table "PersistenSession"
#SessionManager.SessionHome.DBTableName = PersistentSession

#
# CUSTOM session home settings
# ----------------------------
# The following settings are required when using custom session home interfaces.
#
#SessionManager.SessionUserTable.Class =
#SessionManager.SessionHome.Class =




#
# If the URL "/" for this application is accessed, the user will be
# redirected to this URL. This should be a relative URL.
#
Application.DefaultUrl = "Home.po"
Application.Prefix = "@APPLICATION_PREFIX@"
#
PresentationManager.CacheFiles = true
#

#-----------------------------------------------------------------------------
#                    Private Papillon Configuration
#-----------------------------------------------------------------------------
# INFORMATION FILES Admin section
# The actions to be taken when a specific Content-Type is encountered during a file upload.
# WARNING: content types should be noted with _ (underscore) instead of - (minus).
# The value should be the name of a class deriving from InformationFileAction
Papillon.Informations.contentTypeHandler.text.html       = "fr.imag.clips.papillon.business.informationfile.ImportHTMLFile"
Papillon.Informations.contentTypeHandler.encoding.gzip   = "fr.imag.clips.papillon.business.informationfile.ImportGZippedFile"
Papillon.Informations.contentTypeHandler.application.x_gzip   = "fr.imag.clips.papillon.business.informationfile.ImportGZippedFile"
Papillon.Informations.contentTypeHandler.multipart.x_tar_gz   = "fr.imag.clips.papillon.business.informationfile.ImportGZippedFile"
# not using the zip handler to avoid uncompression of embedded zip files into a bigger archive
# eg, I upload a file .ppt.zip and I don't want to uncompress it
Papillon.Informations.contentTypeHandler.application.zip = "fr.imag.clips.papillon.business.informationfile.ImportZipFile"
Papillon.Informations.contentTypeHandler.encoding.bzip   = "fr.imag.clips.papillon.business.informationfile.ImportBZippedFile"
Papillon.Informations.contentTypeHandler.application.x_bzip   = "fr.imag.clips.papillon.business.informationfile.ImportBZippedFile"
Papillon.Informations.contentTypeHandler.application.pdf   = "fr.imag.clips.papillon.business.informationfile.ImportMediaFile"
Papillon.Informations.contentTypeHandler.application.tar = "fr.imag.clips.papillon.business.informationfile.ImportTarFile"
Papillon.Informations.contentTypeHandler.image.gif       = "fr.imag.clips.papillon.business.informationfile.ImportMediaFile"

# The actions to be taken (same as above) when you don't know the content type, but only the file name.
# The value should be the name of a class deriving from InformationFileAction
# For HTML documents
Papillon.Informations.fileExtensionHandler.html   = "fr.imag.clips.papillon.business.informationfile.ImportHTMLFile"
Papillon.Informations.fileExtensionHandler.htm    = "fr.imag.clips.papillon.business.informationfile.ImportHTMLFile"
# For tar & gzip documents
Papillon.Informations.fileExtensionHandler.gzip   = "fr.imag.clips.papillon.business.informationfile.ImportGZippedFile"
# tgz does not work !
# Papillon.Informations.fileExtensionHandler.tgz   =  "fr.imag.clips.papillon.business.informationfile.ImportGZippedFile"
Papillon.Informations.fileExtensionHandler.tar 	  = "fr.imag.clips.papillon.business.informationfile.ImportTarFile"
Papillon.Informations.fileExtensionHandler.gz     = "fr.imag.clips.papillon.business.informationfile.ImportGZippedFile"
Papillon.Informations.fileExtensionHandler.bz2     = "fr.imag.clips.papillon.business.informationfile.ImportBZippedFile"
Papillon.Informations.fileExtensionHandler.bz     = "fr.imag.clips.papillon.business.informationfile.ImportBZippedFile"
# For other documents
Papillon.Informations.fileExtensionHandler.gif    = "fr.imag.clips.papillon.business.informationfile.ImportMediaFile"
Papillon.Informations.fileExtensionHandler.jpg    = "fr.imag.clips.papillon.business.informationfile.ImportMediaFile"
Papillon.Informations.fileExtensionHandler.jpeg   = "fr.imag.clips.papillon.business.informationfile.ImportMediaFile"
Papillon.Informations.fileExtensionHandler.pdf    = "fr.imag.clips.papillon.business.informationfile.ImportMediaFile"
# not using the zip handler to avoid uncompression of embedded zip files into a bigger archive
# eg, I upload a file .ppt.zip and I don't want to uncompress it
Papillon.Informations.fileExtensionHandler.zip     = "fr.imag.clips.papillon.business.informationfile.ImportZipFile"
#Papillon.Informations.fileExtensionHandler.zip     = "fr.imag.clips.papillon.business.informationfile.ImportMediaFile"
# importing other files as is.
Papillon.Informations.fileExtensionHandler.ppt     = "fr.imag.clips.papillon.business.informationfile.ImportMediaFile"
Papillon.Informations.fileExtensionHandler.doc     = "fr.imag.clips.papillon.business.informationfile.ImportMediaFile"
Papillon.Informations.fileExtensionHandler.xml     = "fr.imag.clips.papillon.business.informationfile.ImportMediaFile"
Papillon.Informations.fileExtensionHandler.xsd     = "fr.imag.clips.papillon.business.informationfile.ImportMediaFile"
Papillon.Informations.fileExtensionHandler.xsl     = "fr.imag.clips.papillon.business.informationfile.ImportMediaFile"


# The information files admin directories. 
# CAUTION: WHEN YOU CHANGE THESE OPTIONS, IT APPLIES ONLY TO NEWLY IMPORTED FILES. Hence, older files 
# will still refer to the old directory... Moreover, the change will only be taken into account after an 
# application restart.
# Absolute path to the temporary directory (where files are expanded and processed, then discarded)
Papillon.Informations.tmpDir = "/tmp/"
# Absolute path to the information section base dir.
Papillon.Informations.baseDir = "/home/gdef/www/"
Papillon.Informations.relativeDir = "~gdef/"
# Relative path to the media directory (the directory that contains gifs, jpgs, etc. that are added 
# while importing a file). This directory is relative to the server's information section base Dir. 
Papillon.Informations.mediaDir = "info_media/"

# The list of categories that are to be used for the informationn file section
# The main list is to be used to identify sections in the database (this should not be changed in
# production stage, You may add sections, but you'll lose some information if you remove some...). 
# The other ones are used to present the list of sections to the user in
# his own language (the order should be the same). 
# This kind of configuration should not be kept here. Perhaps we should define a XML Schema to represent it
# and put it in another place...
Papillon.Informations.sections.default[] = "INFO", 
                                           "DEV", 
                                           "DICT", 
                                           "PUBLIS", 
                                           "HOWTO", 
                                           "MISC"
Papillon.Informations.sections.deu[] = "Allgemeine Informationen",
                                       "Entwicklung",
                                       "Wörterbücher",
                                       "Publikationen",
                                       "How To",
                                       "Verschiedenes"
Papillon.Informations.sections.eng[] = "General Information", 
                                       "Jibiki Development", 
                                       "Dictionaries", 
                                       "Related Publications", 
                                       "How To", 
                                       "Misc" 
Papillon.Informations.sections.fra[] = "Informations generales", 
                                       "Developpements", 
                                       "Dictionnaires", 
                                       "Publications", 
                                       "Recettes", 
                                       "Divers"
Papillon.Informations.sections.jpn[] = "一般情報", 
                                       "展開", 
                                       "辞書", 
                                       "論文", 
                                       "ガイド", 
                                       "その他"

#####
# Javamail
#
# in order to send emails with ssl, you must 
# - 1 create an ssl-cert and import it:
# > keytool -import -alias gdef-server -file gdef-server.cer
# - 2 uncomment the following variables: 
#javax.net.ssl.trustStore = "/home/motamot/.keystore"
#javax.net.ssl.trustStorePassword = "@TRUSTSTORE_PASSWORD@"
# - 3 set the following variables to true
Papillon.javamail.mailhost.ssl = false
Papillon.javamail.from = "motamot-server@mailserver.tld"
Papillon.javamail.mailhost.address = "@MAILHOST_ADDRESS@"
# if the server needs auth, set the following variable to true and uncomment the following variables
Papillon.javamail.mailhost.auth = false
#Papillon.javamail.mailhost.user = "@MAILHOST_USER@"
#Papillon.javamail.mailhost.password = "@MAILHOST_PASSWORD@"

#####
# Groups passwords
#
Papillon.Users.Groups.Password.admin = "@JIBIKI_ADMIN_PASSWORD@"
Papillon.Users.Groups.Password.specialist = "@JIBIKI_SPECIALIST_PASSWORD@"
Papillon.Users.Groups.Password.validator = "@JIBIKI_VALIDATOR_PASSWORD@"

# Class name of the layout for pages of the application
Papillon.Presentation.PriorityPackage = "fr.imag.clips.papillon.presentation.xhtmlgdef"
Papillon.LayoutClassName = "fr.imag.clips.papillon.presentation.PapillonLayout"
Papillon.LoginCookieName = "GDEFLoginCookie"
Papillon.Presentation.PageExpireTime=604800

###
# Misc
Papillon.Logging.StoreQueryLogs = true

#+++++++++++++++++++++++++++++++++
# SAXON TRANSFORMATION HANDLER
#+++++++++++++++++++++++++++++++++
Papillon.Saxon.Classpath = "@SAXON8_LIB@"
Papillon.Batik.Classpath = "@BATIK_LIB@"
Papillon.Xalan.Classpath = "@XALAN_LIB@"
Papillon.Xerces.Classpath = "@XERCES_LIB@"
Papillon.Avalon.Classpath = "@AVALON_LIB@"
Papillon.XmlApi.Classpath = "@XMLAPI_LIB@"
Papillon.Fo.Xsl = "@FO_PATH@"

#-----------------------------------------------------------------------------
#                   JDictd server Configuration (RFC 2229)
#-----------------------------------------------------------------------------
#
#
# is dictd listening? 
Dictd.Listen = false

# dictd listening port
Dictd.Port = 2628

# dictd timeout 50000 ~= 15 seconds
Dictd.Timeout = 500000

#-----------------------------------------------------------------------------
#                   PAPILLON's Database Manager Configuration
#-----------------------------------------------------------------------------

DatabaseManager.Databases[] = "gdef"
DatabaseManager.DefaultDatabase = "gdef"
DatabaseManager.Debug = "false"
DatabaseManager.DB.gdef.ClassType = "PostgreSQL"
DatabaseManager.DB.gdef.JdbcDriver = "org.postgresql.Driver"
DatabaseManager.DB.gdef.Connection.Url = "@PGSQL_SERVER_URL@"

DatabaseManager.DB.gdef.Connection.User = "@DB_USER@"
DatabaseManager.DB.gdef.Connection.Password = "@DB_PASSWD@"

DatabaseManager.DB.gdef.Connection.MaxPoolSize = 30
DatabaseManager.DB.gdef.Connection.AllocationTimeout = 10000

DatabaseManager.DB.gdef.Connection.Logging = false

DatabaseManager.DB.gdef.ObjectId.CacheSize = 20
DatabaseManager.DB.gdef.ObjectId.MinValue = 1000000

# ???? c'est pas moi qui ai mis ca ? GS
#DatabaseManager.DB.papillon.DbCharSet = "UTF-8"

# Version of the DB Layer used in this application.
jibiki.dblayer.version=@DBLAYER_VERSION@

#
# Following two lines must be added for PostgreSQL,
# since oID can't be used for column name
#
DatabaseManager.ObjectIdColumnName = "ObjectId"
DatabaseManager.VersionColumnName = "ObjectVersion"




#-----------------------------------------------------------------------------
#                   Database Manager Configuration
#-----------------------------------------------------------------------------
#
#
#DatabaseManager.Databases[] = "example"
#
# The default database used in this application.
#
#DatabaseManager.DefaultDatabase = "example"
#
# Turn on/off debugging for transactions or queries. Valid values
# are "true" or "false".
#
#DatabaseManager.Debug = "false"
#
# The type of database. Normally this is "Standard".
#
#DatabaseManager.DB.example.ClassType = "Standard"
#
# The jdbc driver to use.
#
#DatabaseManager.DB.example.JdbcDriver = "sun.jdbc.odbc.JdbcOdbcDriver"
#
# Database url.
#
#DatabaseManager.DB.example.Connection.Url = "jdbc:odbc:example"
#
# Database user name.  All connection are allocated by this user.
#
#DatabaseManager.DB.example.Connection.User = "scott"
#
# Database user password.
#
#DatabaseManager.DB.example.Connection.Password = "tiger"
#
# The maximum number of connections that a connection
# pool will hold.  If set to zero, then connections
# are allocated indefinitly or until the database
# refuses to allocate any new connections.
#
#DatabaseManager.DB.example.Connection.MaxPoolSize = 30
#
# Maximum amount of time that a thread will wait for
# a connection from the connection pool before an
# exception is thrown.  This will prevent possible dead
# locks.  The time out is in milliseconds.  If the
# time out is <= zero, the allocation of connections
# will wait indefinitely.
#
#DatabaseManager.DB.example.Connection.AllocationTimeout = 10000
#
# Used to log database (SQL) activity.
#
#DatabaseManager.DB.example.Connection.Logging = false
#
# The number of object identifiers that are allocated
# as a group and held in memory.  These identifiers
# are assigned to new data objects that are inserted
# into the database.
#
#DatabaseManager.DB.example.ObjectId.CacheSize = 20
#DatabaseManager.DB.example.ObjectId.MinValue = 1000000

#
# Default cache configuration
#
#DatabaseManager.defaults.cache.maxCacheSize = 100
#DatabaseManager.defaults.cache.maxSimpleCacheSize = 20
#DatabaseManager.defaults.cache.maxComplexCacheSize = 5
#DatabaseManager.defaults.cache.reserveFactor = 0.1

#
# Default table configuration
#
#DatabaseManager.defaults.readOnly = false
#DatabaseManager.defaults.lazyLoading = true
#DatabaseManager.defaults.maxExecuteTime = 200
