/* Generated By:JavaCC: Do not edit this line. UNLParserDebugTokenManager.java */
package fr.imag.clips.papillon.business.pivax.unl_graph;
import java.io.FileInputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Set;
import java.util.Vector;

public class UNLParserDebugTokenManager implements UNLParserDebugConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 7;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 8;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 9;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 6;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 11;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 12;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 15;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 14;
         return jjMoveNfa_0(0, 0);
      case 62:
         jjmatchedKind = 13;
         return jjMoveNfa_0(0, 0);
      case 123:
         return jjMoveStringLiteralDfa1_0(0x180000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 125:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 125:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0x100000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0x100000000000L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 108;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ffa0c800000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(19, 20);
                  else if (curChar == 58)
                     jjCheckNAdd(17);
                  else if (curChar == 59)
                     jjCheckNAddStates(0, 2);
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 3:
                  if (curChar == 10 && kind > 10)
                     kind = 10;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 13:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 16:
                  if (curChar == 58)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (curChar == 34 && kind > 34)
                     kind = 34;
                  break;
               case 21:
                  if ((0x3ffa0c800000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 25:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 26:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 28:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(3, 5);
                  break;
               case 32:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 33:
                  jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(6, 8);
                  break;
               case 39:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 40:
                  jjCheckNAddTwoStates(40, 41);
                  break;
               case 42:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(9, 11);
                  break;
               case 46:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 47:
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 53:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 54:
                  jjCheckNAddTwoStates(54, 55);
                  break;
               case 56:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(15, 17);
                  break;
               case 60:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 61:
                  jjCheckNAddTwoStates(61, 62);
                  break;
               case 63:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(18, 20);
                  break;
               case 67:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(21, 23);
                  break;
               case 71:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 72:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(24, 26);
                  break;
               case 76:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(27, 29);
                  break;
               case 80:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 81:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(30, 32);
                  break;
               case 85:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(33, 35);
                  break;
               case 89:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 90:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(36, 38);
                  break;
               case 94:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(39, 41);
                  break;
               case 98:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 99:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(42, 44);
                  break;
               case 103:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(45, 47);
                  break;
               case 107:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  else if (curChar == 91)
                     jjAddStates(48, 77);
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 13;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 1:
                  jjAddStates(0, 2);
                  break;
               case 5:
                  if ((0x8000000080L & l) != 0L)
                     jjCheckNAddTwoStates(6, 8);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 125 && kind > 26)
                     kind = 26;
                  break;
               case 9:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 10:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if (curChar == 125 && kind > 27)
                     kind = 27;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  jjAddStates(78, 79);
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
                  if ((0xfffffffffffffffeL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 24:
                  if (curChar == 64)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(25);
                  break;
               case 27:
                  if (curChar == 91)
                     jjAddStates(48, 77);
                  break;
               case 31:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAddTwoStates(32, 34);
                  break;
               case 33:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if (curChar == 93 && kind > 16)
                     kind = 16;
                  break;
               case 38:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 41);
                  break;
               case 40:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar == 93 && kind > 17)
                     kind = 17;
                  break;
               case 45:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 48);
                  break;
               case 47:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 48:
                  if (curChar == 93 && kind > 18)
                     kind = 18;
                  break;
               case 52:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 55);
                  break;
               case 54:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if (curChar == 93 && kind > 19)
                     kind = 19;
                  break;
               case 59:
                  if ((0x80000000800000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 62);
                  break;
               case 61:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 62:
                  if (curChar == 93 && kind > 20)
                     kind = 20;
                  break;
               case 66:
                  if ((0x1000000010L & l) != 0L)
                     jjAddStates(21, 23);
                  break;
               case 70:
                  if (curChar == 93 && kind > 21)
                     kind = 21;
                  break;
               case 75:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(27, 29);
                  break;
               case 79:
                  if (curChar == 93 && kind > 22)
                     kind = 22;
                  break;
               case 84:
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(33, 35);
                  break;
               case 88:
                  if (curChar == 93 && kind > 23)
                     kind = 23;
                  break;
               case 93:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(39, 41);
                  break;
               case 97:
                  if (curChar == 93 && kind > 24)
                     kind = 24;
                  break;
               case 102:
                  if ((0x80000000800000L & l) != 0L)
                     jjAddStates(45, 47);
                  break;
               case 106:
                  if (curChar == 93 && kind > 25)
                     kind = 25;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 21:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               case 19:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(78, 79);
                  break;
               case 23:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 29:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 5);
                  break;
               case 30:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 33:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(80, 81);
                  break;
               case 36:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(6, 8);
                  break;
               case 37:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 40:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(82, 83);
                  break;
               case 43:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(9, 11);
                  break;
               case 44:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 47:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(84, 85);
                  break;
               case 50:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(12, 14);
                  break;
               case 51:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 54:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(86, 87);
                  break;
               case 57:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(15, 17);
                  break;
               case 58:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 61:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(88, 89);
                  break;
               case 64:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(18, 20);
                  break;
               case 65:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 68:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(21, 23);
                  break;
               case 69:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 73:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(24, 26);
                  break;
               case 74:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 77:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(27, 29);
                  break;
               case 78:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 82:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(30, 32);
                  break;
               case 83:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 86:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(33, 35);
                  break;
               case 87:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 91:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(36, 38);
                  break;
               case 92:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 95:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(39, 41);
                  break;
               case 96:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 100:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(42, 44);
                  break;
               case 101:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 104:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(45, 47);
                  break;
               case 105:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 108 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000000L) != 0L)
            return 0;
         return -1;
      case 1:
         if ((active0 & 0x10000000L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0x10000000L) != 0L)
            return 2;
         return -1;
      case 3:
         if ((active0 & 0x10000000L) != 0L)
            return 3;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 123:
         return jjMoveStringLiteralDfa1_1(0x10000000L);
      default :
         return jjMoveNfa_1(4, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa2_1(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private final int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private final int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa4_1(active0, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa4_1(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
private final int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 71:
         return jjMoveStringLiteralDfa5_1(active0, 0x10000000L);
      case 103:
         return jjMoveStringLiteralDfa5_1(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
private final int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 125:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(5, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_1(4, active0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (curChar == 125)
                     kind = 29;
                  break;
               case 4:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 4, 28, 30, 31, 35, 37, 38, 42, 44, 45, 49, 51, 52, 56, 
   58, 59, 63, 65, 71, 67, 69, 70, 72, 74, 80, 76, 78, 79, 81, 83, 
   89, 85, 87, 88, 90, 92, 98, 94, 96, 97, 99, 101, 107, 103, 105, 106, 
   28, 30, 31, 35, 37, 38, 42, 44, 45, 49, 51, 52, 56, 58, 59, 63, 
   65, 71, 72, 74, 80, 81, 83, 89, 90, 92, 98, 99, 101, 107, 19, 20, 
   33, 34, 40, 41, 47, 48, 54, 55, 61, 62, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default : 
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec4[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec5[i2] & l2) != 0L);
      default : 
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, "\50", "\51", 
"\76", "\74", "\54", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "WithinNLText", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1e03fff801L, 
};
static final long[] jjtoSkip = {
   0x1b00007c0L, 
};
static final long[] jjtoSpecial = {
   0x1b0000000L, 
};
static final long[] jjtoMore = {
   0x4c000000L, 
};
private SimpleCharStream input_stream;
private final int[] jjrounds = new int[108];
private final int[] jjstateSet = new int[216];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public UNLParserDebugTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public UNLParserDebugTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 108; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 30)
         {
            jjmatchedKind = 30;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

final void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
}
